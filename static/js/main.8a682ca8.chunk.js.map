{"version":3,"sources":["operations/fee.js","utils.js","config/colors.js","config/park.js","config/chart.js","components/App.js","serviceWorker.js","index.js"],"names":["calculateFee","feeRates","value","parkedHrs","arguments","length","undefined","constructor","name","TypeError","concat","JSON","stringify","totalCost","hrsLeft","some","rate","index","costByRate","Math","ceil","hrs","cost","max","storage","key","store","data","localStorage","setItem","this","getData","rawData","getItem","parsedData","parse","Object","objectSpread","start","Date","reset","removeItem","COLORS","RED","ORANGE","YELLOW","GREEN","TEAL","BLUE","PURPLE","GRAY","GRID","parkConfig","MBK","color","CTW","SIAM_CEN","parkConfigEntries","entries","OVERVIEW_HOURS_ARRAY","Array","from","unused","feeOverview","values","map","park","label","hours","borderColor","backgroundColor","fill","chartData","labels","hour","datasets","chartOptions","maintainAspectRatio","tooltips","mode","intersect","itemSort","a","b","yLabel","hover","legend","position","boxWidth","padding","usePointStyle","scales","yAxes","gridLines","zeroLineColor","ticks","beginAtZero","xAxes","defaultState","isChoosingPark","App","_useState","useState","_useState2","slicedToArray","state","setState","onChoosePark","event","parkId","target","dataset","startTime","currentFee","durationHrs","fee","onClickReset","useEffect","_storage$getData","currentDuration","dateStart","dateEnd","abs","getDurationHrs","parkInfo","react_default","createElement","className","es","options","height","Fragment","style","toLocaleString","currency","onClick","_ref","_ref2","info","data-park-id","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8a682ca8.chunk.js","sourcesContent":["import { isArray } from '../utils'\n\n/**\n * calculate parking fee\n *\n * @param {Array.<{hrs: number, cost: number}>} feeRates\n * @param {number} [parkedHrs = 1]\n */\nexport function calculateFee(feeRates, parkedHrs = 1) {\n  if (!isArray(feeRates)) {\n    throw new TypeError(\n      `Error! \"feeRates\" argument for \"calculateFee()\" should be an array, instead it receives, ${JSON.stringify(\n        feeRates\n      )}`\n    )\n  }\n\n  // Initialize values\n  let totalCost = 0\n  let hrsLeft = parkedHrs\n\n  // use .some to break instead of forEach that cannot be stopped\n  feeRates.some((rate, index) => {\n    // Stop the loop when there is no hrsLeft\n    if (hrsLeft <= 0) return true\n\n    // if the rate is the last one,\n    // we'll use that rate for the rest of hr left.\n    if (index === feeRates.length - 1) {\n      // Most parking fee will think that fragment of an hour is full one hour,\n      // and we can achieve that by using Math.ceil\n      const hrsFactor = Math.ceil(hrsLeft / rate.hrs)\n      const costByRate = hrsFactor * rate.cost\n      totalCost += costByRate\n      hrsLeft = 0\n\n      // stop any further operation,\n      // because at this the last item and we should get our answer.\n      return true\n    }\n\n    // add cost of the rate to total cost\n    totalCost += rate.cost\n    // minus hrsLeft and make sure hrsLeft won't go below zero\n    hrsLeft = Math.max(hrsLeft - rate.hrs, 0)\n\n    // continue the loop\n    return false\n  })\n\n  return totalCost\n}\n\nexport const storage = {\n  key: 'PARKING_TIME_START',\n  store: function(data) {\n    localStorage.setItem(this.key, JSON.stringify(data))\n  },\n  getData: function() {\n    const rawData = localStorage.getItem(this.key)\n    if (!rawData) return {}\n\n    const parsedData = JSON.parse(rawData)\n\n    return {\n      ...parsedData,\n      start: new Date(parsedData.start),\n    }\n  },\n  reset: function() {\n    localStorage.removeItem(this.key)\n  },\n}\n","/**\n * Check if the value is an array\n *\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return !!value && typeof value === 'object' && value.constructor.name === 'Array'\n}\n\n/**\n * Get duration between two date objects\n * NOTE: the duration will always be positive, which mean the arguments order won't affect the result\n *\n * @param {Date} dateStart\n * @param {Date} [dateEnd = new Date()]\n * @returns {number} duration\n */\nexport function getDurationHrs(dateStart, dateEnd = new Date()) {\n  const durationMillisec = Math.abs(dateEnd - dateStart)\n  // convert milliseconds to hours\n  return durationMillisec / 1000 / 60 / 60\n}\n","const COLORS = {\n  RED: '#ff4a48',\n  ORANGE: '#ff9f40',\n  YELLOW: '#ffcd56',\n  GREEN: '#7ad461',\n  TEAL: '#4bc0c0',\n  BLUE: '#36a2eb',\n  PURPLE: '#9966ff',\n  GRAY: '#c9cbcf',\n  GRID: 'rgba(255, 255, 255, 0.1)',\n}\n\nexport default COLORS\n","import COLORS from './colors'\n\nexport const parkConfig = {\n  MBK: {\n    name: 'MBK',\n    color: COLORS.RED,\n    feeRates: [{ hrs: 2, cost: 10 }, { hrs: 1, cost: 10 }],\n  },\n  CTW: {\n    name: 'CTW',\n    color: COLORS.BLUE,\n    feeRates: [{ hrs: 4, cost: 10 }, { hrs: 1, cost: 20 }],\n  },\n  SIAM_CEN: {\n    name: 'Siam Center',\n    color: COLORS.GREEN,\n    feeRates: [{ hrs: 4, cost: 10 }, { hrs: 1, cost: 20 }],\n  },\n}\n\nexport const parkConfigEntries = Object.entries(parkConfig)\n","import { calculateFee } from '../operations/fee'\nimport COLORS from './colors'\nimport { parkConfig } from './park'\n\nconst MAX_OVERVIEW_HOURS = 8\n\nexport const OVERVIEW_HOURS_ARRAY = Array.from(\n  // make array-like object that have specific length property\n  { length: MAX_OVERVIEW_HOURS },\n  // map function to create the array using index + 1\n  // which will result in an array starting from 1 to array length\n  (unused, index) => index + 1\n)\n/**\n * This data shows parking fee of each place for each hour you parked\n * { placeName: [array of fee by hours of parking] }\n * @type {Object}\n */\nexport const feeOverview = Object.values(parkConfig).map(park => {\n  return {\n    label: park.name,\n    data: OVERVIEW_HOURS_ARRAY.map(hours => calculateFee(park.feeRates, hours)),\n    borderColor: park.color,\n    backgroundColor: park.color,\n    fill: false,\n  }\n})\n\nexport const chartData = {\n  labels: OVERVIEW_HOURS_ARRAY.map(hour => `${hour} hr${hour > 1 ? 's' : ''}`),\n  datasets: feeOverview,\n}\n\nexport const chartOptions = {\n  maintainAspectRatio: false,\n  tooltips: {\n    // show all parking fee at the hour\n    mode: 'index',\n    intersect: false,\n    // put cheaper parking to be displayed first\n    itemSort: (a, b) => a.yLabel - b.yLabel,\n  },\n  hover: {\n    mode: 'nearest',\n    intersect: true,\n  },\n  legend: {\n    position: 'bottom',\n    labels: {\n      boxWidth: 5,\n      padding: 20,\n      usePointStyle: true,\n    },\n  },\n  scales: {\n    yAxes: [\n      {\n        gridLines: {\n          color: COLORS.GRID,\n          zeroLineColor: COLORS.GRID,\n        },\n        ticks: {\n          beginAtZero: true,\n        },\n      },\n    ],\n    xAxes: [\n      {\n        gridLines: {\n          color: COLORS.GRID,\n        },\n      },\n    ],\n  },\n}\n","import React, { useEffect, useState } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { chartData, chartOptions } from '../config/chart'\nimport COLORS from '../config/colors'\nimport { parkConfig, parkConfigEntries } from '../config/park'\nimport { calculateFee, storage } from '../operations/fee'\nimport { getDurationHrs } from '../utils'\nimport './App.css'\n\nconst defaultState = { isChoosingPark: false }\n\nfunction App() {\n  const [state, setState] = useState(defaultState)\n\n  const onClickPark = () => {\n    setState({\n      ...state,\n      startTime: new Date(), // record currentTime\n      isChoosingPark: true, // popup park choosing popup\n    })\n  }\n\n  const onChoosePark = event => {\n    const element = event.target\n    const parkId = element.dataset.parkId\n\n    // get parkInfo\n    const park = parkConfig[parkId]\n\n    // store it to storage\n    storage.store({ start: state.startTime, parkId })\n    // initialize currentDuration\n    const currentDuration = 0.001\n    // initialize currentFee\n    const currentFee = calculateFee(park.feeRates, currentDuration)\n\n    setState({\n      ...state,\n      park: {\n        start: state.startTime,\n        name: park.name,\n        color: park.color,\n        durationHrs: currentDuration,\n        fee: currentFee,\n      },\n      isChoosingPark: false,\n    })\n  }\n\n  const onClickReset = () => {\n    storage.reset()\n    setState(defaultState)\n  }\n\n  // This intended to run on the first mount ONLY\n  // to display current park state if exist\n  useEffect(() => {\n    const { start, parkId } = storage.getData()\n    if (!start) return\n\n    const currentDuration = getDurationHrs(start)\n    const parkInfo = parkConfig[parkId]\n\n    setState({\n      ...state,\n      park: {\n        start,\n        name: parkInfo.name,\n        color: parkInfo.color,\n        durationHrs: currentDuration,\n        fee: calculateFee(parkInfo.feeRates, currentDuration),\n      },\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Bike parking fee</h1>\n      {/* CHART */}\n      <div className=\"chart-container\">\n        <Line data={chartData} options={chartOptions} height={280} />\n      </div>\n\n      {/* PARK INFO */}\n      {state.park ? (\n        <>\n          <div className=\"parking-info-container\">\n            <h2 className=\"parking-at\" style={{ color: state.park.color }}>\n              {state.park.name}\n            </h2>\n            <div className=\"park-info -start\">\n              <span className=\"label\">Check-in:</span>{' '}\n              <strong>{state.park.start.toLocaleString()}</strong>\n            </div>\n            <div className=\"park-info -duration\">\n              <span className=\"label\">Duration:</span>{' '}\n              <strong>{state.park.durationHrs.toLocaleString()} hrs</strong>\n            </div>\n            <div className=\"park-info -fee\">\n              <span className=\"label\">Total: </span>\n              <span className=\"fee\" style={{ color: COLORS.GREEN }}>\n                {state.park.fee.toLocaleString('en-TH', { style: 'currency', currency: 'THB' })}\n              </span>\n            </div>\n          </div>\n          <button\n            className=\"floating-button\"\n            style={{ backgroundColor: COLORS.YELLOW }}\n            onClick={onClickReset}\n          >\n            <i className=\"material-icons\">delete</i>Reset\n          </button>\n        </>\n      ) : (\n        <button\n          className=\"floating-button _prevent-selection\"\n          style={{ backgroundColor: COLORS.PURPLE }}\n          onClick={onClickPark}\n        >\n          <i className=\"material-icons\">directions_car</i>Park\n        </button>\n      )}\n\n      {/* POPUP to choose the park */}\n      {state.isChoosingPark && (\n        <>\n          <div className=\"backdrop\" onClick={onClickReset} />\n          <section className=\"popup\">\n            <div className=\"popup-header\">Where are you parking at?</div>\n            <ul className=\"park-list\">\n              {parkConfigEntries.map(([key, info]) => (\n                <li\n                  key={key}\n                  data-park-id={key}\n                  className=\"park-list-item _prevent-selection\"\n                  onClick={onChoosePark}\n                >\n                  {info.name}\n                </li>\n              ))}\n            </ul>\n          </section>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}