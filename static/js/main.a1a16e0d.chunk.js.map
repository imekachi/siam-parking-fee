{"version":3,"sources":["utils.js","operations/fee.js","config/colors.js","config/park.js","config/chart.js","components/ParkingInfo.js","components/PopUpChoosePark.js","components/App.js","serviceWorker.js","index.js"],"names":["isArray","value","constructor","name","getDurationHrs","dateStart","dateEnd","Date","durationMillisec","Math","abs","calculateFee","feeRates","parkedHrs","TypeError","JSON","stringify","totalCost","hrsLeft","some","rate","index","length","costByRate","ceil","hrs","cost","max","storage","key","store","data","prevData","this","getData","localStorage","setItem","rawData","getItem","parsedData","parse","start","reset","removeItem","COLORS","RED","ORANGE","YELLOW","GREEN","TEAL","BLUE","PURPLE","GRAY","GRID","parkConfig","SAMYAN","color","MBK","CTW","SIAM_CEN","parkConfigEntries","Object","entries","OVERVIEW_HOURS_ARRAY","Array","from","unused","feeOverview","values","map","park","label","hours","borderColor","backgroundColor","fill","chartData","labels","hour","datasets","chartOptions","maintainAspectRatio","tooltips","mode","intersect","itemSort","a","b","yLabel","hover","legend","position","boxWidth","padding","usePointStyle","scales","yAxes","gridLines","zeroLineColor","ticks","beginAtZero","xAxes","ParkingInfo","props","durationHrs","fee","isLive","onClickLiveButton","className","onClick","style","toLocaleString","currency","PopUpChoosePark","onChoosePark","onClickBackdrop","info","data-park-id","defaultState","isChoosingPark","isRendered","App","useState","state","setState","onClickReset","useEffect","parkId","storageIsLive","timeoutId","parkInfo","updateState","currentDuration","setTimeout","clearTimeout","options","height","startTime","event","target","dataset","currentFee","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yQAMO,SAASA,EAAQC,GACtB,QAASA,GAA0B,kBAAVA,GAAiD,UAA3BA,EAAMC,YAAYC,KAW5D,SAASC,EAAeC,GAAkC,IAAvBC,EAAsB,uDAAZ,IAAIC,KAChDC,EAAmBC,KAAKC,IAAIJ,EAAUD,GAE5C,OAAOG,EAAmB,IAAO,GAAK,GCbjC,SAASG,EAAaC,GAA0B,IAAhBC,EAAe,uDAAH,EACjD,IAAKb,EAAQY,GACX,MAAM,IAAIE,UAAJ,mGACwFC,KAAKC,UAC/FJ,KAMN,IAAIK,EAAY,EACZC,EAAUL,EA+Bd,OA5BAD,EAASO,MAAK,SAACC,EAAMC,GAEnB,GAAIH,GAAW,EAAG,OAAO,EAIzB,GAAIG,IAAUT,EAASU,OAAS,EAAG,CAGjC,IACMC,EADYd,KAAKe,KAAKN,EAAUE,EAAKK,KACZL,EAAKM,KAMpC,OALAT,GAAaM,EACbL,EAAU,GAIH,EAST,OALAD,GAAaG,EAAKM,KAElBR,EAAUT,KAAKkB,IAAIT,EAAUE,EAAKK,IAAK,IAGhC,KAGFR,EAGF,IAAMW,EAAU,CACrBC,IAAK,qBACLC,MAAO,SAAUC,GACf,IAAMC,EAAWC,KAAKC,UACtBC,aAAaC,QAAQH,KAAKJ,IAAKd,KAAKC,UAAL,eAAoBgB,EAAaD,MAElEG,QAAS,WACP,IAAMG,EAAUF,aAAaG,QAAQL,KAAKJ,KAC1C,IAAKQ,EAAS,MAAO,GAErB,IAAME,EAAaxB,KAAKyB,MAAMH,GAM9B,OAJIE,EAAWE,QACbF,EAAWE,MAAQ,IAAIlC,KAAKgC,EAAWE,QAGlCF,GAETG,MAAO,WACLP,aAAaQ,WAAWV,KAAKJ,OC5DlBe,EAZA,CACbC,IAAK,UACLC,OAAQ,UACRC,OAAQ,UACRC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,KAAM,UACNC,KAAM,4BCPKC,EAAa,CACxBC,OAAQ,CACNpD,KAAM,kBACNqD,MAAOZ,EAAOG,OACdnC,SAAU,CACR,CAAEa,IAAK,EAAGC,KAAM,GAChB,CAAED,IAAK,EAAGC,KAAM,IAChB,CAAED,IAAK,EAAGC,KAAM,IAChB,CAAED,IAAK,EAAGC,KAAM,MAGpB+B,IAAK,CACHtD,KAAM,MACNqD,MAAOZ,EAAOC,IACdjC,SAAU,CACR,CAAEa,IAAK,EAAGC,KAAM,IAChB,CAAED,IAAK,EAAGC,KAAM,MAGpBgC,IAAK,CACHvD,KAAM,MACNqD,MAAOZ,EAAOM,KACdtC,SAAU,CACR,CAAEa,IAAK,EAAGC,KAAM,IAChB,CAAED,IAAK,EAAGC,KAAM,MAGpBiC,SAAU,CACRxD,KAAM,cACNqD,MAAOZ,EAAOI,MACdpC,SAAU,CACR,CAAEa,IAAK,EAAGC,KAAM,IAChB,CAAED,IAAK,EAAGC,KAAM,OAKTkC,EAAoBC,OAAOC,QAAQR,GCjCnCS,EAAuBC,MAAMC,KAExC,CAAE3C,OAJuB,IAOzB,SAAC4C,EAAQ7C,GAAT,OAAmBA,EAAQ,KAOhB8C,EAAcN,OAAOO,OAAOd,GAAYe,KAAI,SAACC,GACxD,MAAO,CACLC,MAAOD,EAAKnE,KACZ4B,KAAMgC,EAAqBM,KAAI,SAACG,GAAD,OAAW7D,EAAa2D,EAAK1D,SAAU4D,MACtEC,YAAaH,EAAKd,MAClBkB,gBAAiBJ,EAAKd,MACtBmB,MAAM,MAIGC,EAAY,CACvBC,OAAQd,EAAqBM,KAAI,SAACS,GAAD,gBAAaA,EAAb,cAAuBA,EAAO,EAAI,IAAM,OACzEC,SAAUZ,GAGCa,EAAe,CAC1BC,qBAAqB,EACrBC,SAAU,CAERC,KAAM,QACNC,WAAW,EAEXC,SAAU,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,SAEnCC,MAAO,CACLN,KAAM,UACNC,WAAW,GAEbM,OAAQ,CACNC,SAAU,SACVd,OAAQ,CACNe,SAAU,EACVC,QAAS,GACTC,eAAe,IAGnBC,OAAQ,CACNC,MAAO,CACL,CACEC,UAAW,CACTzC,MAAOZ,EAAOS,KACd6C,cAAetD,EAAOS,MAExB8C,MAAO,CACLC,aAAa,KAInBC,MAAO,CACL,CACEJ,UAAW,CACTzC,MAAOZ,EAAOS,U,cC5BTiD,MApCf,SAAqBC,GAAQ,IACnBpG,EAAoEoG,EAApEpG,KAAMqD,EAA8D+C,EAA9D/C,MAAOf,EAAuD8D,EAAvD9D,MAAO+D,EAAgDD,EAAhDC,YAAaC,EAAmCF,EAAnCE,IAAKC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,kBACtD,OACE,yBAAKC,UAAU,0BACb,4BAAQA,UAAS,qBAAgBF,EAAS,SAAW,IAAMG,QAASF,GAApE,QAGA,wBAAIC,UAAU,aAAaE,MAAO,CAAEtD,MAAOA,IACxCrD,GAEH,yBAAKyG,UAAU,oBACb,0BAAMA,UAAU,SAAhB,aADF,IAC2C,gCAASnE,EAAMsE,mBAE1D,yBAAKH,UAAU,uBACb,0BAAMA,UAAU,SAAhB,aADF,IAC2C,gCAASJ,EAAYO,iBAArB,SAE3C,yBAAKH,UAAU,kBACb,0BAAMA,UAAU,SAAhB,WACA,0BAAMA,UAAU,MAAME,MAAO,CAAEtD,MAAOZ,EAAOI,QAC1CyD,EAAIM,eAAe,QAAS,CAAED,MAAO,WAAYE,SAAU,Y,OCUvDC,MA7Bf,SAAyBV,GAAQ,IACvBW,EAAkCX,EAAlCW,aAAcC,EAAoBZ,EAApBY,gBACtB,OACE,oCACE,yBAAKP,UAAU,WAAWC,QAASM,IACnC,6BAASP,UAAU,SACjB,yBAAKA,UAAU,gBAAf,6BACA,wBAAIA,UAAU,aACXhD,EAAkBS,KAAI,mCAAExC,EAAF,KAAOuF,EAAP,YACrB,wBACEvF,IAAKA,EACLwF,eAAcxF,EACd+E,UAAU,oCACVC,QAASK,GAERE,EAAKjH,aCTdmH,EAAe,CAAEC,gBAAgB,EAAOC,YAAY,GA4I3CC,MA1If,WAAgB,IAAD,EACaC,mBAASJ,GADtB,mBACNK,EADM,KACCC,EADD,KAsCPC,EAAe,WAAM,IAEjBnB,EAAW9E,EAAQM,UAAnBwE,OACR9E,EAAQc,QAERd,EAAQE,MAAM,CAAE4E,WAChBkB,EAASN,IAoDX,OAtCAQ,qBAAU,WAAO,IAAD,EACmClG,EAAQM,UAAjDO,EADM,EACNA,MAAOsF,EADD,EACCA,OAAgBC,EADjB,EACStB,OACvB,GAAKjE,EAAL,CAEA,IAqBIwF,EArBEC,EAAW5E,EAAWyE,GAKtBI,EAAc,WAAqC,IAAD,yDAAP,GAAO,IAAjCzB,cAAiC,MAAxBiB,EAAMjB,OAAkB,EAChD0B,EAAkBhI,EAAeqC,GACvCmF,EAAS,eACJD,EADG,CAENjB,SACAc,YAAY,EACZlD,KAAM,CACJ7B,QACAtC,KAAM+H,EAAS/H,KACfqD,MAAO0E,EAAS1E,MAChBgD,YAAa4B,EACb3B,IAAK9F,EAAauH,EAAStH,SAAUwH,QAa3C,OAPIT,EAAMjB,OACRuB,EAAYI,WAAWF,EAAa,KAC1BR,EAAMH,YAEhBW,EAAY,CAAEzB,OAAQsB,IAGjB,WACLM,aAAaL,OAEd,CAACN,IAGF,yBAAKf,UAAU,OACb,wBAAIA,UAAU,UAAd,oBAEA,yBAAKA,UAAU,mBACb,kBAAC,OAAD,CAAM7E,KAAM6C,EAAW2D,QAASvD,EAAcwD,OAAQ,OAIvDb,EAAMrD,KACL,oCACE,kBAAC,EAAD,iBACMqD,EAAMrD,KADZ,CAEEoC,OAAQiB,EAAMjB,OACdC,kBA/DgB,WAExB,IAAMD,GAAUiB,EAAMjB,OAEtB9E,EAAQE,MAAM,CAAE4E,WAEhBkB,EAAS,eAAKD,EAAN,CAAajB,gBA2Df,4BACEE,UAAU,kBACVE,MAAO,CAAEpC,gBAAiB9B,EAAOG,QACjC8D,QAASgB,GAET,uBAAGjB,UAAU,kBAAb,UALF,UASF,4BACEA,UAAU,qCACVE,MAAO,CAAEpC,gBAAiB9B,EAAOO,QACjC0D,QAzHY,WAClBe,EAAS,eACJD,EADG,CAENc,UAAW,IAAIlI,KACfgH,gBAAgB,OAuHZ,uBAAGX,UAAU,kBAAb,kBALF,QAUDe,EAAMJ,gBACL,kBAAC,EAAD,CAAiBL,aAzHF,SAACwB,GACpB,IACMX,EADUW,EAAMC,OACCC,QAAQb,OAGzBzD,EAAOhB,EAAWyE,GAGxBnG,EAAQE,MAAM,CAAEW,MAAOkF,EAAMc,UAAWV,WAExC,IAEMc,EAAalI,EAAa2D,EAAK1D,SAFb,MAIxBgH,EAAS,eACJD,EADG,CAENrD,KAAM,CACJ7B,MAAOkF,EAAMc,UACbtI,KAAMmE,EAAKnE,KACXqD,MAAOc,EAAKd,MACZgD,YAVoB,KAWpBC,IAAKoC,GAEPtB,gBAAgB,MAkG+BJ,gBAAiBU,MCrIhEiB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GAELA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlC,QACf4B,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDc1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,oBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,oBAAN,sBAEP9B,IAiEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,GACHK,MAAK,SAACuB,GAEL,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAACC,GAClCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IAAI,oEArFVwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCrC/BE,I","file":"static/js/main.a1a16e0d.chunk.js","sourcesContent":["/**\n * Check if the value is an array\n *\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return !!value && typeof value === 'object' && value.constructor.name === 'Array'\n}\n\n/**\n * Get duration between two date objects\n * NOTE: the duration will always be positive, which mean the arguments order won't affect the result\n *\n * @param {Date} dateStart\n * @param {Date} [dateEnd = new Date()]\n * @returns {number} duration\n */\nexport function getDurationHrs(dateStart, dateEnd = new Date()) {\n  const durationMillisec = Math.abs(dateEnd - dateStart)\n  // convert milliseconds to hours\n  return durationMillisec / 1000 / 60 / 60\n}\n","import { isArray } from '../utils'\n\n/**\n * calculate parking fee\n *\n * @param {Array.<{hrs: number, cost: number}>} feeRates\n * @param {number} [parkedHrs = 1]\n */\nexport function calculateFee(feeRates, parkedHrs = 1) {\n  if (!isArray(feeRates)) {\n    throw new TypeError(\n      `Error! \"feeRates\" argument for \"calculateFee()\" should be an array, instead it receives, ${JSON.stringify(\n        feeRates\n      )}`\n    )\n  }\n\n  // Initialize values\n  let totalCost = 0\n  let hrsLeft = parkedHrs\n\n  // use .some to break instead of forEach that cannot be stopped\n  feeRates.some((rate, index) => {\n    // Stop the loop when there is no hrsLeft\n    if (hrsLeft <= 0) return true\n\n    // if the rate is the last one,\n    // we'll use that rate for the rest of hr left.\n    if (index === feeRates.length - 1) {\n      // Most parking fee will think that fragment of an hour is full one hour,\n      // and we can achieve that by using Math.ceil\n      const hrsFactor = Math.ceil(hrsLeft / rate.hrs)\n      const costByRate = hrsFactor * rate.cost\n      totalCost += costByRate\n      hrsLeft = 0\n\n      // stop any further operation,\n      // because at this the last item and we should get our answer.\n      return true\n    }\n\n    // add cost of the rate to total cost\n    totalCost += rate.cost\n    // minus hrsLeft and make sure hrsLeft won't go below zero\n    hrsLeft = Math.max(hrsLeft - rate.hrs, 0)\n\n    // continue the loop\n    return false\n  })\n\n  return totalCost\n}\n\nexport const storage = {\n  key: 'PARKING_TIME_START',\n  store: function (data) {\n    const prevData = this.getData()\n    localStorage.setItem(this.key, JSON.stringify({ ...prevData, ...data }))\n  },\n  getData: function () {\n    const rawData = localStorage.getItem(this.key)\n    if (!rawData) return {}\n\n    const parsedData = JSON.parse(rawData)\n\n    if (parsedData.start) {\n      parsedData.start = new Date(parsedData.start)\n    }\n\n    return parsedData\n  },\n  reset: function () {\n    localStorage.removeItem(this.key)\n  },\n}\n","const COLORS = {\n  RED: '#ff4a48',\n  ORANGE: '#ff9f40',\n  YELLOW: '#ffcd56',\n  GREEN: '#7ad461',\n  TEAL: '#4bc0c0',\n  BLUE: '#36a2eb',\n  PURPLE: '#9966ff',\n  GRAY: '#c9cbcf',\n  GRID: 'rgba(255, 255, 255, 0.1)',\n}\n\nexport default COLORS\n","import COLORS from './colors'\n\nexport const parkConfig = {\n  SAMYAN: {\n    name: 'SamYan Mitrtown',\n    color: COLORS.YELLOW,\n    feeRates: [\n      { hrs: 2, cost: 0 },\n      { hrs: 1, cost: 10 },\n      { hrs: 1, cost: 10 },\n      { hrs: 1, cost: 20 },\n    ],\n  },\n  MBK: {\n    name: 'MBK',\n    color: COLORS.RED,\n    feeRates: [\n      { hrs: 2, cost: 10 },\n      { hrs: 1, cost: 10 },\n    ],\n  },\n  CTW: {\n    name: 'CTW',\n    color: COLORS.BLUE,\n    feeRates: [\n      { hrs: 4, cost: 10 },\n      { hrs: 1, cost: 20 },\n    ],\n  },\n  SIAM_CEN: {\n    name: 'Siam Center',\n    color: COLORS.GREEN,\n    feeRates: [\n      { hrs: 2, cost: 20 },\n      { hrs: 1, cost: 20 },\n    ],\n  },\n}\n\nexport const parkConfigEntries = Object.entries(parkConfig)\n","import { calculateFee } from '../operations/fee'\nimport COLORS from './colors'\nimport { parkConfig } from './park'\n\nconst MAX_OVERVIEW_HOURS = 8\n\nexport const OVERVIEW_HOURS_ARRAY = Array.from(\n  // make array-like object that have specific length property\n  { length: MAX_OVERVIEW_HOURS },\n  // map function to create the array using index + 1\n  // which will result in an array starting from 1 to array length\n  (unused, index) => index + 1\n)\n/**\n * This data shows parking fee of each place for each hour you parked\n * { placeName: [array of fee by hours of parking] }\n * @type {Object}\n */\nexport const feeOverview = Object.values(parkConfig).map((park) => {\n  return {\n    label: park.name,\n    data: OVERVIEW_HOURS_ARRAY.map((hours) => calculateFee(park.feeRates, hours)),\n    borderColor: park.color,\n    backgroundColor: park.color,\n    fill: false,\n  }\n})\n\nexport const chartData = {\n  labels: OVERVIEW_HOURS_ARRAY.map((hour) => `${hour} hr${hour > 1 ? 's' : ''}`),\n  datasets: feeOverview,\n}\n\nexport const chartOptions = {\n  maintainAspectRatio: false,\n  tooltips: {\n    // show all parking fee at the hour\n    mode: 'index',\n    intersect: false,\n    // put cheaper parking to be displayed first\n    itemSort: (a, b) => a.yLabel - b.yLabel,\n  },\n  hover: {\n    mode: 'nearest',\n    intersect: true,\n  },\n  legend: {\n    position: 'bottom',\n    labels: {\n      boxWidth: 5,\n      padding: 20,\n      usePointStyle: true,\n    },\n  },\n  scales: {\n    yAxes: [\n      {\n        gridLines: {\n          color: COLORS.GRID,\n          zeroLineColor: COLORS.GRID,\n        },\n        ticks: {\n          beginAtZero: true,\n        },\n      },\n    ],\n    xAxes: [\n      {\n        gridLines: {\n          color: COLORS.GRID,\n        },\n      },\n    ],\n  },\n}\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport COLORS from '../config/colors'\nimport './ParkInfo.css'\n\nfunction ParkingInfo(props) {\n  const { name, color, start, durationHrs, fee, isLive, onClickLiveButton } = props\n  return (\n    <div className=\"parking-info-container\">\n      <button className={`live-button${isLive ? ' -live' : ''}`} onClick={onClickLiveButton}>\n        LIVE\n      </button>\n      <h2 className=\"parking-at\" style={{ color: color }}>\n        {name}\n      </h2>\n      <div className=\"park-info -start\">\n        <span className=\"label\">Check-in:</span> <strong>{start.toLocaleString()}</strong>\n      </div>\n      <div className=\"park-info -duration\">\n        <span className=\"label\">Duration:</span> <strong>{durationHrs.toLocaleString()} hrs</strong>\n      </div>\n      <div className=\"park-info -fee\">\n        <span className=\"label\">Total: </span>\n        <span className=\"fee\" style={{ color: COLORS.GREEN }}>\n          {fee.toLocaleString('en-TH', { style: 'currency', currency: 'THB' })}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nParkingInfo.propTypes = {\n  name: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n  start: PropTypes.instanceOf(Date).isRequired,\n  durationHrs: PropTypes.number.isRequired,\n  fee: PropTypes.number.isRequired,\n  isLive: PropTypes.bool,\n  onClickLiveButton: PropTypes.func,\n}\n\nexport default ParkingInfo\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { parkConfigEntries } from '../config/park'\nimport './PopUpChoosePark.css'\n\nfunction PopUpChoosePark(props) {\n  const { onChoosePark, onClickBackdrop } = props\n  return (\n    <>\n      <div className=\"backdrop\" onClick={onClickBackdrop} />\n      <section className=\"popup\">\n        <div className=\"popup-header\">Where are you parking at?</div>\n        <ul className=\"park-list\">\n          {parkConfigEntries.map(([key, info]) => (\n            <li\n              key={key}\n              data-park-id={key}\n              className=\"park-list-item _prevent-selection\"\n              onClick={onChoosePark}\n            >\n              {info.name}\n            </li>\n          ))}\n        </ul>\n      </section>\n    </>\n  )\n}\n\nPopUpChoosePark.propTypes = {\n  onChoosePark: PropTypes.func,\n  onClickBackdrop: PropTypes.func,\n}\n\nexport default PopUpChoosePark\n","import React, { useEffect, useState } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { chartData, chartOptions } from '../config/chart'\nimport COLORS from '../config/colors'\nimport { parkConfig } from '../config/park'\nimport { calculateFee, storage } from '../operations/fee'\nimport { getDurationHrs } from '../utils'\nimport './App.css'\nimport ParkingInfo from './ParkingInfo'\nimport PopUpChoosePark from './PopUpChoosePark'\n\nconst defaultState = { isChoosingPark: false, isRendered: false }\n\nfunction App() {\n  const [state, setState] = useState(defaultState)\n\n  const onClickPark = () => {\n    setState({\n      ...state,\n      startTime: new Date(), // record currentTime\n      isChoosingPark: true, // popup park choosing popup\n    })\n  }\n\n  const onChoosePark = (event) => {\n    const element = event.target\n    const parkId = element.dataset.parkId\n\n    // get parkInfo\n    const park = parkConfig[parkId]\n\n    // store it to storage\n    storage.store({ start: state.startTime, parkId })\n    // initialize currentDuration\n    const currentDuration = 0.001\n    // initialize currentFee\n    const currentFee = calculateFee(park.feeRates, currentDuration)\n\n    setState({\n      ...state,\n      park: {\n        start: state.startTime,\n        name: park.name,\n        color: park.color,\n        durationHrs: currentDuration,\n        fee: currentFee,\n      },\n      isChoosingPark: false,\n    })\n  }\n\n  const onClickReset = () => {\n    // we will remove storage data but we want to keep \"isLive\" setting\n    const { isLive } = storage.getData()\n    storage.reset()\n    // save \"isLive\" back into storage\n    storage.store({ isLive })\n    setState(defaultState)\n  }\n\n  const onClickLiveButton = () => {\n    // determine current state of isLive\n    const isLive = !state.isLive\n    // update isLive data in storage\n    storage.store({ isLive })\n    // update isLive data in react state\n    setState({ ...state, isLive })\n  }\n\n  // This intended to run on the first mount ONLY\n  // to display current park state if exist\n  useEffect(() => {\n    const { start, parkId, isLive: storageIsLive } = storage.getData()\n    if (!start) return undefined\n\n    const parkInfo = parkConfig[parkId]\n\n    // create update state function\n    // that receives option object\n    // with default value of isLive is from state\n    const updateState = ({ isLive = state.isLive } = {}) => {\n      const currentDuration = getDurationHrs(start)\n      setState({\n        ...state,\n        isLive,\n        isRendered: true,\n        park: {\n          start,\n          name: parkInfo.name,\n          color: parkInfo.color,\n          durationHrs: currentDuration,\n          fee: calculateFee(parkInfo.feeRates, currentDuration),\n        },\n      })\n    }\n\n    let timeoutId\n    if (state.isLive) {\n      timeoutId = setTimeout(updateState, 1000)\n    } else if (!state.isRendered) {\n      // first render only, use isLive from storage\n      updateState({ isLive: storageIsLive })\n    }\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [state])\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Bike parking fee</h1>\n      {/* CHART */}\n      <div className=\"chart-container\">\n        <Line data={chartData} options={chartOptions} height={280} />\n      </div>\n\n      {/* PARK INFO */}\n      {state.park ? (\n        <>\n          <ParkingInfo\n            {...state.park}\n            isLive={state.isLive}\n            onClickLiveButton={onClickLiveButton}\n          />\n          <button\n            className=\"floating-button\"\n            style={{ backgroundColor: COLORS.YELLOW }}\n            onClick={onClickReset}\n          >\n            <i className=\"material-icons\">delete</i>Reset\n          </button>\n        </>\n      ) : (\n        <button\n          className=\"floating-button _prevent-selection\"\n          style={{ backgroundColor: COLORS.PURPLE }}\n          onClick={onClickPark}\n        >\n          <i className=\"material-icons\">directions_car</i>Park\n        </button>\n      )}\n\n      {/* POPUP to choose the park */}\n      {state.isChoosingPark && (\n        <PopUpChoosePark onChoosePark={onChoosePark} onClickBackdrop={onClickReset} />\n      )}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}