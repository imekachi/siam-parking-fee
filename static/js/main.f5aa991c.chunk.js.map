{"version":3,"sources":["config/colors.ts","config/park.ts","utils/array.ts","operations/fee.ts","utils/string.ts","utils/time.ts","components/ParkingInfo.tsx","components/ParkSelectionPopup.tsx","config/chart.ts","components/FeeChart.tsx","components/ParkButton.tsx","components/ResetButton.tsx","hooks/useParkingState.ts","components/App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["COLORS","RED","ORANGE","YELLOW","GREEN","TEAL","BLUE","PURPLE","GRAY","GRID","parkConfig","ICON","name","color","feeRates","Date","hrs","cost","SAMYAN","MBK","CTW","SIAM_CEN","parkConfigEntries","Object","entries","isArray","value","constructor","calculateFee","parkedHrs","TypeError","JSON","stringify","totalCost","hrsLeft","some","rate","index","length","costByRate","Math","ceil","max","storage","key","store","data","prevData","this","getData","localStorage","setItem","rawData","getItem","parsedData","parse","start","reset","removeItem","strPad","pad","parsedValue","toString","repeat","formatDuration","ms","time","allocate","msUnit","units","trunc","hours","minutes","seconds","durationToTime","ParkingInfo","props","parkId","isLive","onClickLiveButton","useState","renderController","setRenderController","useMemo","dateStart","dateEnd","abs","getTime","getDuration","newDurationHrs","msToHrs","duration","fee","useEffect","timeoutId","window","setTimeout","clearTimeout","className","onClick","style","toLocaleString","currency","ParkSelectionPopup","onChoosePark","onClickBackdrop","map","info","OVERVIEW_HOURS_ARRAY","Array","from","unused","feeOverview","values","park","label","borderColor","backgroundColor","fill","chartData","labels","hour","datasets","chartOptions","maintainAspectRatio","plugins","tooltip","mode","intersect","itemSort","a","b","parsed","y","legend","position","boxWidth","padding","usePointStyle","hover","scales","beginAtZero","grid","x","FeeChart","options","height","ParkButton","ResetButton","useParkingState","setIsLive","toggleIsLive","useCallback","newIsLive","useLiveState","parkingInfo","setParkingInfo","storageIsLive","savePark","newParkingInfo","resetPark","undefined","App","isChoosingPark","setIsChoosingPark","event","target","dataset","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f5aa991c.chunk.js","sourcesContent":["const COLORS = {\n  RED: '#ff4a48',\n  ORANGE: '#ff9f40',\n  YELLOW: '#ffcd56',\n  GREEN: '#7ad461',\n  TEAL: '#4bc0c0',\n  BLUE: '#36a2eb',\n  PURPLE: '#9966ff',\n  GRAY: '#c9cbcf',\n  GRID: 'rgba(255, 255, 255, 0.1)',\n}\n\nexport default COLORS\n","import COLORS from './colors'\n\nexport interface ParkFeeRate {\n  hrs: number\n  cost: number\n}\n\nexport interface ParkInfo {\n  name: string\n  color: string\n  feeRates: ParkFeeRate[]\n}\n\nexport const parkConfig: { [key: string]: ParkInfo } = {\n  ICON: {\n    name: 'Icon Siam',\n    color: COLORS.PURPLE,\n    feeRates:\n      new Date() > new Date('2021-01-31 23:59')\n        ? [\n            { hrs: 2, cost: 0 },\n            { hrs: 1, cost: 20 },\n          ]\n        : [\n            { hrs: 6, cost: 0 },\n            { hrs: 1, cost: 20 },\n          ],\n  },\n  SAMYAN: {\n    name: 'SamYan Mitrtown',\n    color: COLORS.YELLOW,\n    feeRates: [\n      { hrs: 2, cost: 0 },\n      { hrs: 1, cost: 10 },\n      { hrs: 1, cost: 10 },\n      { hrs: 1, cost: 20 },\n    ],\n  },\n  MBK: {\n    name: 'MBK',\n    color: COLORS.RED,\n    feeRates: [\n      { hrs: 2, cost: 10 },\n      { hrs: 1, cost: 10 },\n    ],\n  },\n  CTW: {\n    name: 'CTW',\n    color: COLORS.BLUE,\n    feeRates: [\n      { hrs: 4, cost: 10 },\n      { hrs: 1, cost: 20 },\n    ],\n  },\n  SIAM_CEN: {\n    name: 'Siam Center',\n    color: COLORS.GREEN,\n    feeRates: [\n      { hrs: 2, cost: 20 },\n      { hrs: 1, cost: 20 },\n    ],\n  },\n}\n\nexport const parkConfigEntries = Object.entries(parkConfig)\n","/**\n * Check if the value is an array\n */\nexport function isArray(value: any): boolean {\n  return !!value && typeof value === 'object' && value.constructor.name === 'Array'\n}\n","import { ParkFeeRate } from '../config/park'\nimport { isArray } from '../utils/array'\n\n/**\n * calculate parking fee\n */\nexport function calculateFee(feeRates: ParkFeeRate[], parkedHrs = 1): number {\n  if (!isArray(feeRates)) {\n    throw new TypeError(\n      `Error! \"feeRates\" argument for \"calculateFee()\" should be an array, instead it receives, ${JSON.stringify(\n        feeRates\n      )}`\n    )\n  }\n\n  // Initialize values\n  let totalCost = 0\n  let hrsLeft = parkedHrs\n\n  // use .some to break instead of forEach that cannot be stopped\n  feeRates.some((rate, index) => {\n    // Stop the loop when there is no hrsLeft\n    if (hrsLeft <= 0) return true\n\n    // if the rate is the last one,\n    // we'll use that rate for the rest of hr left.\n    if (index === feeRates.length - 1) {\n      // Most parking fee will think that fragment of an hour is full one hour,\n      // and we can achieve that by using Math.ceil\n      const hrsFactor = Math.ceil(hrsLeft / rate.hrs)\n      const costByRate = hrsFactor * rate.cost\n      totalCost += costByRate\n      hrsLeft = 0\n\n      // stop any further operation,\n      // because at this the last item and we should get our answer.\n      return true\n    }\n\n    // add cost of the rate to total cost\n    totalCost += rate.cost\n    // minus hrsLeft and make sure hrsLeft won't go below zero\n    hrsLeft = Math.max(hrsLeft - rate.hrs, 0)\n\n    // continue the loop\n    return false\n  })\n\n  return totalCost\n}\n\nexport interface StorageParkingInfo {\n  parkId?: string\n  start?: Date\n  isLive?: boolean\n}\n\nexport const storage = {\n  key: 'PARKING_TIME_START',\n  store: function (data: StorageParkingInfo) {\n    const prevData = this.getData()\n    localStorage.setItem(this.key, JSON.stringify({ ...prevData, ...data }))\n  },\n  getData: function (): StorageParkingInfo | null {\n    const rawData = localStorage.getItem(this.key)\n    if (!rawData) return null\n\n    const parsedData = JSON.parse(rawData)\n\n    if (parsedData.start) {\n      parsedData.start = new Date(parsedData.start)\n    }\n\n    return parsedData\n  },\n  reset: function () {\n    localStorage.removeItem(this.key)\n  },\n}\n","/**\n * fill the value to match the desire length and return as a string\n */\nexport function strPad(value: number | string, length: number, pad: string): string {\n  const parsedValue = typeof value === 'number' ? value.toString() : value\n  if (parsedValue.length >= length) return parsedValue\n  return `${pad.repeat(length - parsedValue.length)}${value}`\n}\n","import { strPad } from './string'\n\n/**\n * Get duration between two date objects in milliseconds\n * NOTE: the duration will always be positive, which mean the arguments order won't affect the result\n */\nexport function getDuration(dateStart: Date, dateEnd: Date = new Date()): number {\n  return Math.abs(dateEnd.getTime() - dateStart.getTime())\n}\n\n/**\n * converts milliseconds to hours\n */\nexport function msToHrs(ms: number): number {\n  return ms / 1000 / 60 / 60\n}\n\nexport type TimeFragment = {\n  hours: number\n  minutes: number\n  seconds: number\n}\n\nexport function durationToTime(ms: number): TimeFragment {\n  /**\n   * Takes as many whole units from the time pool (ms) as possible\n   * @param {number} msUnit - Size of a single unit in milliseconds\n   * @return {number} Number of units taken from the time pool\n   */\n  const allocate = (msUnit: number): number => {\n    const units = Math.trunc(ms / msUnit)\n    ms -= units * msUnit\n    return units\n  }\n\n  return {\n    hours: allocate(3600000),\n    minutes: allocate(60000),\n    seconds: allocate(1000),\n  }\n}\n\nexport function formatDuration(ms: number): string {\n  const time = durationToTime(ms)\n  return `${strPad(time.hours, 2, '0')}:${strPad(time.minutes, 2, '0')}:${strPad(\n    time.seconds,\n    2,\n    '0'\n  )}`\n}\n","import React, { useEffect, useMemo, useState } from 'react'\nimport COLORS from '../config/colors'\nimport './ParkInfo.css'\nimport { parkConfig } from '../config/park'\nimport { calculateFee } from '../operations/fee'\nimport { formatDuration, getDuration, msToHrs } from '../utils/time'\n\ninterface ParkingInfoProps {\n  parkId: string\n  start: Date\n  isLive?: boolean\n  onClickLiveButton?: (event: React.MouseEvent<HTMLButtonElement>) => void\n}\n\nfunction ParkingInfo(props: ParkingInfoProps) {\n  const { parkId, start, isLive, onClickLiveButton } = props\n  const { color, name, feeRates } = parkConfig[parkId]\n\n  const [renderController, setRenderController] = useState(false)\n\n  const { duration, fee } = useMemo(\n    (): { duration: number; fee: number } => {\n      const ms = getDuration(start)\n      const newDurationHrs = msToHrs(ms)\n      return {\n        duration: ms,\n        fee: calculateFee(feeRates, newDurationHrs),\n      }\n    },\n    // renderController is unused, but I'm using it to trigger re-rendering from setTimeout\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [feeRates, start, renderController]\n  )\n\n  // live update fee/duration\n  useEffect(() => {\n    let timeoutId: number\n    if (isLive) {\n      timeoutId = window.setTimeout(() => {\n        setRenderController(!renderController)\n      }, 1000)\n    }\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [isLive, renderController])\n\n  return (\n    <div className=\"parking-info-container\" data-testid=\"ParkInfo\">\n      <button\n        className={`live-button${isLive ? ' -live' : ''}`}\n        onClick={onClickLiveButton}\n        data-testid=\"LiveButton\"\n      >\n        LIVE\n      </button>\n      <h2 className=\"parking-at\" style={{ color }}>\n        {name}\n      </h2>\n      <div className=\"park-info -start\">\n        <span className=\"label\">Check-in:</span> <strong>{start.toLocaleString()}</strong>\n      </div>\n      <div className=\"park-info -duration\">\n        <span className=\"label\">Duration:</span> <strong>{formatDuration(duration)}</strong>\n      </div>\n      <div className=\"park-info -fee\">\n        <span className=\"label\">Total: </span>\n        <span className=\"fee\" style={{ color: COLORS.GREEN }}>\n          {fee.toLocaleString('en-TH', { style: 'currency', currency: 'THB' })}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default ParkingInfo\n","import React, { MouseEventHandler } from 'react'\nimport { parkConfigEntries } from '../config/park'\nimport './ParkSelectionPopup.css'\n\ninterface ParkSelectionPopupProps {\n  onChoosePark?: MouseEventHandler<HTMLLIElement>\n  onClickBackdrop?: MouseEventHandler<HTMLDivElement>\n}\n\nfunction ParkSelectionPopup({ onChoosePark, onClickBackdrop }: ParkSelectionPopupProps) {\n  return (\n    <>\n      <div\n        className=\"backdrop\"\n        onClick={onClickBackdrop}\n        data-testid=\"ParkSelectionPopupBackdrop\"\n      />\n      <section className=\"popup\" data-testid=\"ParkSelectionPopup\">\n        <div className=\"popup-header\">Where are you parking at?</div>\n        <ul className=\"park-list\">\n          {parkConfigEntries.map(([key, info]) => (\n            <li\n              key={key}\n              data-park-id={key}\n              className=\"park-list-item _prevent-selection\"\n              onClick={onChoosePark}\n            >\n              {info.name}\n            </li>\n          ))}\n        </ul>\n      </section>\n    </>\n  )\n}\n\nexport default ParkSelectionPopup\n","import { calculateFee } from '../operations/fee'\nimport COLORS from './colors'\nimport { parkConfig, ParkInfo } from './park'\nimport * as Chart from 'chart.js'\n\nconst MAX_OVERVIEW_HOURS = 8\n\nexport const OVERVIEW_HOURS_ARRAY = Array.from(\n  // make array-like object that have specific length property\n  { length: MAX_OVERVIEW_HOURS },\n  // map function to create the array using index + 1\n  // which will result in an array starting from 1 to array length\n  (unused, index) => index + 1\n)\n/**\n * This data shows parking fee of each place for each hour you parked\n */\nexport const feeOverview = Object.values(parkConfig).map((park: ParkInfo) => ({\n  label: park.name,\n  data: OVERVIEW_HOURS_ARRAY.map((hours) => calculateFee(park.feeRates, hours)),\n  borderColor: park.color,\n  backgroundColor: park.color,\n  fill: false,\n}))\n\nexport const chartData = {\n  labels: OVERVIEW_HOURS_ARRAY.map((hour) => `${hour} hr${hour > 1 ? 's' : ''}`),\n  datasets: feeOverview,\n}\n\nexport const chartOptions: Chart.ChartOptions = {\n  maintainAspectRatio: false,\n  plugins: {\n    tooltip: {\n      // show all parking fee at the hour\n      mode: 'index',\n      intersect: false,\n      // put cheaper parking to be displayed first\n      itemSort: (a, b) => a.parsed.y - b.parsed.y,\n    },\n    legend: {\n      position: 'bottom',\n      labels: {\n        boxWidth: 5,\n        padding: 20,\n        usePointStyle: true,\n      },\n    },\n  },\n  hover: {\n    mode: 'nearest',\n    intersect: true,\n  },\n  scales: {\n    y: {\n      beginAtZero: true,\n      grid: {\n        color: COLORS.GRID,\n        borderColor: COLORS.GRID,\n      },\n    },\n    x: {\n      grid: {\n        color: COLORS.GRID,\n        borderColor: COLORS.GRID,\n      },\n    },\n  },\n}\n","import { Line } from 'react-chartjs-2'\nimport { chartData, chartOptions } from '../config/chart'\nimport React from 'react'\n\nexport default function FeeChart() {\n  return (\n    <div className=\"chart-container\" data-testid=\"FeeChart\">\n      <Line data={chartData} options={chartOptions} height={280} />\n    </div>\n  )\n}\n","import COLORS from '../config/colors'\nimport React, { MouseEventHandler } from 'react'\n\ninterface ParkButtonProps {\n  onClick?: MouseEventHandler<HTMLButtonElement>\n}\n\nexport default function ParkButton({ onClick }: ParkButtonProps) {\n  return (\n    <button\n      className=\"floating-button _prevent-selection\"\n      style={{ backgroundColor: COLORS.PURPLE }}\n      onClick={onClick}\n      data-testid=\"ParkButton\"\n    >\n      <i className=\"material-icons\">directions_car</i>Park\n    </button>\n  )\n}\n","import COLORS from '../config/colors'\nimport React, { MouseEventHandler } from 'react'\n\ninterface ResetButtonProps {\n  onClick?: MouseEventHandler<HTMLButtonElement>\n}\n\nexport default function ResetButton({ onClick }: ResetButtonProps) {\n  return (\n    <button\n      className=\"floating-button\"\n      style={{ backgroundColor: COLORS.YELLOW }}\n      onClick={onClick}\n      data-testid=\"ResetButton\"\n    >\n      <i className=\"material-icons\">delete</i>Reset\n    </button>\n  )\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { storage } from '../operations/fee'\n\nexport interface ParkingInfoState {\n  parkId: string\n  start: Date\n}\n\nexport function useParkingState() {\n  const { isLive, setIsLive, toggleIsLive } = useLiveState()\n  const [parkingInfo, setParkingInfo] = useState<ParkingInfoState>()\n\n  // initialize data\n  useEffect(() => {\n    const { start, parkId, isLive: storageIsLive } = storage.getData() ?? {}\n    if (!start || !parkId) return undefined\n\n    setIsLive(!!storageIsLive)\n    setParkingInfo({ parkId, start })\n  }, [setIsLive])\n\n  const savePark = (parkId: string) => {\n    const newParkingInfo: ParkingInfoState = {\n      parkId,\n      start: new Date(),\n    }\n\n    // store it to storage\n    storage.store({ start: newParkingInfo.start, parkId })\n    // update the state\n    setParkingInfo(newParkingInfo)\n  }\n\n  const resetPark = () => {\n    storage.reset()\n    // we want to keep \"isLive\" setting,\n    // save \"isLive\" back into storage\n    storage.store({ isLive })\n    setParkingInfo(undefined)\n  }\n\n  return { parkingInfo, isLive, toggleIsLive, savePark, resetPark }\n}\n\nfunction useLiveState() {\n  const [isLive, setIsLive] = useState(false)\n\n  const toggleIsLive = useCallback(() => {\n    const newIsLive = !isLive\n    storage.store({ isLive: newIsLive })\n    setIsLive(newIsLive)\n  }, [isLive])\n\n  return { isLive, setIsLive, toggleIsLive }\n}\n","import React, { useState } from 'react'\nimport './App.css'\nimport ParkingInfo from './ParkingInfo'\nimport ParkSelectionPopup from './ParkSelectionPopup'\nimport FeeChart from './FeeChart'\nimport ParkButton from './ParkButton'\nimport ResetButton from './ResetButton'\nimport { useParkingState } from '../hooks/useParkingState'\n\nfunction App() {\n  const [isChoosingPark, setIsChoosingPark] = useState(false)\n  const { parkingInfo, isLive, toggleIsLive, savePark, resetPark } = useParkingState()\n\n  const onChoosePark = (event: React.MouseEvent<HTMLElement>) => {\n    const element = event.target as HTMLElement\n    const parkId = element.dataset.parkId as string\n\n    setIsChoosingPark(false)\n    savePark(parkId)\n  }\n\n  return (\n    <main className=\"App\">\n      <h1 className=\"header\">Bike parking fee</h1>\n      <FeeChart />\n\n      {parkingInfo ? (\n        <>\n          <ParkingInfo\n            parkId={parkingInfo.parkId}\n            start={parkingInfo.start}\n            isLive={isLive}\n            onClickLiveButton={toggleIsLive}\n          />\n          <ResetButton onClick={resetPark} />\n        </>\n      ) : (\n        <ParkButton onClick={() => setIsChoosingPark(true)} />\n      )}\n\n      {isChoosingPark && (\n        <ParkSelectionPopup\n          onChoosePark={onChoosePark}\n          onClickBackdrop={() => setIsChoosingPark(false)}\n        />\n      )}\n    </main>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n"],"sourceRoot":""}