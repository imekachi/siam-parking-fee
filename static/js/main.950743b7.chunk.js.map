{"version":3,"sources":["config/colors.js","config/parking.js","config/chart.js","operations/fee.js","utils.js","components/App.js","serviceWorker.js","index.js"],"names":["COLORS","RED","ORANGE","YELLOW","GREEN","BLUE","PURPLE","GRAY","GRID","parkingInfo","MBK","name","color","feeRates","hrs","cost","CTW","SIAM_CEN","OVERVIEW_HOURS_ARRAY","Array","from","length","unused","index","feeOverview","Object","values","map","parking","label","data","hours","value","parkedHrs","arguments","undefined","constructor","TypeError","concat","JSON","stringify","totalCost","hrsLeft","some","rate","costByRate","Math","ceil","max","calculateFee","borderColor","backgroundColor","fill","chartData","labels","hour","datasets","chartOptions","maintainAspectRatio","tooltips","mode","intersect","itemSort","a","b","yLabel","hover","legend","position","boxWidth","padding","usePointStyle","scales","yAxes","gridLines","zeroLineColor","ticks","beginAtZero","xAxes","App","react_default","createElement","className","es","options","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.950743b7.chunk.js","sourcesContent":["const COLORS = {\n  RED: '#ff6384',\n  ORANGE: '#ff9f40',\n  YELLOW: '#ffcd56',\n  GREEN: '#4bc0c0',\n  BLUE: '#36a2eb',\n  PURPLE: '#9966ff',\n  GRAY: '#c9cbcf',\n  GRID: 'rgba(255, 255, 255, 0.05)',\n}\n\nexport default COLORS\n","import COLORS from './colors'\n\nexport const parkingInfo = {\n  MBK: {\n    name: 'MBK',\n    color: COLORS.RED,\n    feeRates: [{ hrs: 2, cost: 10 }, { hrs: 1, cost: 10 }],\n  },\n  CTW: {\n    name: 'CTW',\n    color: COLORS.BLUE,\n    feeRates: [{ hrs: 4, cost: 10 }, { hrs: 1, cost: 20 }],\n  },\n  SIAM_CEN: {\n    name: 'Siam Center',\n    color: COLORS.GREEN,\n    feeRates: [{ hrs: 4, cost: 10 }, { hrs: 1, cost: 20 }],\n  },\n}\n","import { calculateFee } from '../operations/fee'\nimport COLORS from './colors'\nimport { parkingInfo } from './parking'\n\nconst MAX_OVERVIEW_HOURS = 10\n\nexport const OVERVIEW_HOURS_ARRAY = Array.from(\n  // make array-like object that have specific length property\n  { length: MAX_OVERVIEW_HOURS },\n  // map function to create the array using index + 1\n  // which will result in an array starting from 1 to array length\n  (unused, index) => index + 1\n)\n/**\n * This data shows parking fee of each place for each hour you parked\n * { placeName: [array of fee by hours of parking] }\n * @type {Object}\n */\nexport const feeOverview = Object.values(parkingInfo).map(parking => {\n  return {\n    label: parking.name,\n    data: OVERVIEW_HOURS_ARRAY.map(hours => calculateFee(parking.feeRates, hours)),\n    borderColor: parking.color,\n    backgroundColor: parking.color,\n    fill: false,\n  }\n})\n\nexport const chartData = {\n  labels: OVERVIEW_HOURS_ARRAY.map(hour => `${hour} hr${hour > 1 ? 's' : ''}`),\n  datasets: feeOverview,\n}\n\nexport const chartOptions = {\n  maintainAspectRatio: false,\n  tooltips: {\n    // show all parking fee at the hour\n    mode: 'index',\n    intersect: false,\n    // put cheaper parking to be displayed first\n    itemSort: (a, b) => a.yLabel - b.yLabel,\n  },\n  hover: {\n    mode: 'nearest',\n    intersect: true,\n  },\n  legend: {\n    position: 'bottom',\n    labels: {\n      boxWidth: 10,\n      padding: 20,\n      usePointStyle: true,\n    },\n  },\n  scales: {\n    yAxes: [\n      {\n        gridLines: {\n          color: COLORS.GRID,\n          zeroLineColor: COLORS.GRID,\n        },\n        ticks: {\n          beginAtZero: true,\n        },\n      },\n    ],\n    xAxes: [\n      {\n        gridLines: {\n          color: COLORS.GRID,\n        },\n      },\n    ],\n  },\n}\n","import { isArray } from '../utils'\n\n/**\n * calculate parking fee\n *\n * @param {Array.<{hrs: number, cost: number}>} feeRates\n * @param {number} [parkedHrs = 1]\n */\nexport function calculateFee(feeRates, parkedHrs = 1) {\n  if (!isArray(feeRates)) {\n    throw new TypeError(\n      `Error! \"feeRates\" argument for \"calculateFee()\" should be an array, instead it receives, ${JSON.stringify(\n        feeRates\n      )}`\n    )\n  }\n\n  // Initialize values\n  let totalCost = 0\n  let hrsLeft = parkedHrs\n\n  // use .some to break instead of forEach that cannot be stopped\n  feeRates.some((rate, index) => {\n    // Stop the loop when there is no hrsLeft\n    if (hrsLeft <= 0) return true\n\n    // if the rate is the last one,\n    // we'll use that rate for the rest of hr left.\n    if (index === feeRates.length - 1) {\n      // Most parking fee will think that fragment of an hour is full one hour,\n      // and we can achieve that by using Math.ceil\n      const hrsFactor = Math.ceil(hrsLeft / rate.hrs)\n      const costByRate = hrsFactor * rate.cost\n      totalCost += costByRate\n      hrsLeft = 0\n\n      // stop any further operation,\n      // because at this the last item and we should get our answer.\n      return true\n    }\n\n    // add cost of the rate to total cost\n    totalCost += rate.cost\n    // minus hrsLeft and make sure hrsLeft won't go below zero\n    hrsLeft = Math.max(hrsLeft - rate.hrs, 0)\n\n    // continue the loop\n    return false\n  })\n\n  return totalCost\n}\n","/**\n * Check if the value is an array\n *\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return !!value && typeof value === 'object' && value.constructor.name === 'Array'\n}\n","import React from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { chartData, chartOptions } from '../config/chart'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Bike parking fee by hours</h1>\n      <div>\n        <Line data={chartData} options={chartOptions} height={400} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}