{"version":3,"sources":["config/colors.js","config/parking.js","config/chart.js","operations/fee.js","utils.js","components/App.js","index.js"],"names":["COLORS","RED","ORANGE","YELLOW","GREEN","BLUE","PURPLE","GRAY","parkingInfo","MBK","name","color","feeRates","hrs","cost","CTW","SIAM_CEN","OVERVIEW_HOURS_ARRAY","Array","from","length","unused","index","feeOverview","Object","values","map","parking","label","data","hours","value","parkedHrs","arguments","undefined","constructor","TypeError","concat","JSON","stringify","totalCost","hrsLeft","some","rate","costByRate","Math","ceil","max","calculateFee","borderColor","backgroundColor","fill","chartData","labels","hour","datasets","chartOptions","maintainAspectRatio","tooltips","mode","intersect","itemSort","a","b","yLabel","hover","legend","position","boxWidth","padding","usePointStyle","scales","yAxes","ticks","beginAtZero","App","react_default","createElement","className","es","options","height","ReactDOM","render","components_App","document","getElementById"],"mappings":"sJAAA,IAUeA,EAVA,CACbC,IAAK,UACLC,OAAQ,UACRC,OAAQ,UACRC,MAAO,UACPC,KAAM,UACNC,OAAQ,UACRC,KAAM,WCLKC,EAAc,CACzBC,IAAK,CACHC,KAAM,MACNC,MAAOX,EAAOC,IACdW,SAAU,CAAC,CAAEC,IAAK,EAAGC,KAAM,IAAM,CAAED,IAAK,EAAGC,KAAM,MAEnDC,IAAK,CACHL,KAAM,MACNC,MAAOX,EAAOK,KACdO,SAAU,CAAC,CAAEC,IAAK,EAAGC,KAAM,IAAM,CAAED,IAAK,EAAGC,KAAM,MAEnDE,SAAU,CACRN,KAAM,cACNC,MAAOX,EAAOI,MACdQ,SAAU,CAAC,CAAEC,IAAK,EAAGC,KAAM,IAAM,CAAED,IAAK,EAAGC,KAAM,OCXxCG,EAAuBC,MAAMC,KAExC,CAAEC,OAJuB,IAOzB,SAACC,EAAQC,GAAT,OAAmBA,EAAQ,IAOhBC,EAAcC,OAAOC,OAAOjB,GAAakB,IAAI,SAAAC,GACxD,MAAO,CACLC,MAAOD,EAAQjB,KACfmB,KAAMZ,EAAqBS,IAAI,SAAAI,GAAK,OCZjC,SAAsBlB,GAAyB,ICF9BmB,EDEeC,EAAeC,UAAAb,OAAA,QAAAc,IAAAD,UAAA,GAAAA,UAAA,GAAH,EACjD,KCHsBF,EDGTnB,ICFsB,kBAAVmB,GAAiD,UAA3BA,EAAMI,YAAYzB,KDG/D,MAAM,IAAI0B,UAAJ,4FAAAC,OACwFC,KAAKC,UAC/F3B,KAMN,IAAI4B,EAAY,EACZC,EAAUT,EA+Bd,OA5BApB,EAAS8B,KAAK,SAACC,EAAMrB,GAEnB,GAAImB,GAAW,EAAG,OAAO,EAIzB,GAAInB,IAAUV,EAASQ,OAAS,EAAG,CAGjC,IACMwB,EADYC,KAAKC,KAAKL,EAAUE,EAAK9B,KACZ8B,EAAK7B,KAMpC,OALA0B,GAAaI,EACbH,EAAU,GAIH,EAST,OALAD,GAAaG,EAAK7B,KAElB2B,EAAUI,KAAKE,IAAIN,EAAUE,EAAK9B,IAAK,IAGhC,IAGF2B,ED9BmCQ,CAAarB,EAAQf,SAAUkB,KACvEmB,YAAatB,EAAQhB,MACrBuC,gBAAiBvB,EAAQhB,MACzBwC,MAAM,KAIGC,EAAY,CACvBC,OAAQpC,EAAqBS,IAAI,SAAA4B,GAAI,SAAAjB,OAAOiB,EAAP,OAAAjB,OAAiBiB,EAAO,EAAI,IAAM,MACvEC,SAAUhC,GAGCiC,EAAe,CAC1BC,qBAAqB,EACrBC,SAAU,CAERC,KAAM,QACNC,WAAW,EAEXC,SAAU,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,SAEnCC,MAAO,CACLN,KAAM,UACNC,WAAW,GAEbM,OAAQ,CACNC,SAAU,SACVd,OAAQ,CACNe,SAAU,GACVC,QAAS,GACTC,eAAe,IAGnBC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,OG1CRC,MAXf,WACE,OACEC,EAAAd,EAAAe,cAAA,OAAKC,UAAU,OACbF,EAAAd,EAAAe,cAAA,uCACAD,EAAAd,EAAAe,cAAA,WACED,EAAAd,EAAAe,cAACE,EAAA,EAAD,CAAMlD,KAAMuB,EAAW4B,QAASxB,EAAcyB,OAAQ,SCH9DC,IAASC,OAAOP,EAAAd,EAAAe,cAACO,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b11d9332.chunk.js","sourcesContent":["const COLORS = {\n  RED: '#ff6384',\n  ORANGE: '#ff9f40',\n  YELLOW: '#ffcd56',\n  GREEN: '#4bc0c0',\n  BLUE: '#36a2eb',\n  PURPLE: '#9966ff',\n  GRAY: '#c9cbcf',\n}\n\nexport default COLORS\n","import COLORS from './colors'\n\nexport const parkingInfo = {\n  MBK: {\n    name: 'MBK',\n    color: COLORS.RED,\n    feeRates: [{ hrs: 2, cost: 10 }, { hrs: 1, cost: 10 }],\n  },\n  CTW: {\n    name: 'CTW',\n    color: COLORS.BLUE,\n    feeRates: [{ hrs: 4, cost: 10 }, { hrs: 1, cost: 20 }],\n  },\n  SIAM_CEN: {\n    name: 'Siam Center',\n    color: COLORS.GREEN,\n    feeRates: [{ hrs: 4, cost: 10 }, { hrs: 1, cost: 20 }],\n  },\n}\n","import { calculateFee } from '../operations/fee'\nimport { parkingInfo } from './parking'\n\nconst MAX_OVERVIEW_HOURS = 10\n\nexport const OVERVIEW_HOURS_ARRAY = Array.from(\n  // make array-like object that have specific length property\n  { length: MAX_OVERVIEW_HOURS },\n  // map function to create the array using index + 1\n  // which will result in an array starting from 1 to array length\n  (unused, index) => index + 1\n)\n/**\n * This data shows parking fee of each place for each hour you parked\n * { placeName: [array of fee by hours of parking] }\n * @type {Object}\n */\nexport const feeOverview = Object.values(parkingInfo).map(parking => {\n  return {\n    label: parking.name,\n    data: OVERVIEW_HOURS_ARRAY.map(hours => calculateFee(parking.feeRates, hours)),\n    borderColor: parking.color,\n    backgroundColor: parking.color,\n    fill: false,\n  }\n})\n\nexport const chartData = {\n  labels: OVERVIEW_HOURS_ARRAY.map(hour => `${hour} hr${hour > 1 ? 's' : ''}`),\n  datasets: feeOverview,\n}\n\nexport const chartOptions = {\n  maintainAspectRatio: false,\n  tooltips: {\n    // show all parking fee at the hour\n    mode: 'index',\n    intersect: false,\n    // put cheaper parking to be displayed first\n    itemSort: (a, b) => a.yLabel - b.yLabel,\n  },\n  hover: {\n    mode: 'nearest',\n    intersect: true,\n  },\n  legend: {\n    position: 'bottom',\n    labels: {\n      boxWidth: 10,\n      padding: 20,\n      usePointStyle: true,\n    },\n  },\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          beginAtZero: true,\n        },\n      },\n    ],\n  },\n}\n","import { isArray } from '../utils'\n\n/**\n * calculate parking fee\n *\n * @param {Array.<{hrs: number, cost: number}>} feeRates\n * @param {number} [parkedHrs = 1]\n */\nexport function calculateFee(feeRates, parkedHrs = 1) {\n  if (!isArray(feeRates)) {\n    throw new TypeError(\n      `Error! \"feeRates\" argument for \"calculateFee()\" should be an array, instead it receives, ${JSON.stringify(\n        feeRates\n      )}`\n    )\n  }\n\n  // Initialize values\n  let totalCost = 0\n  let hrsLeft = parkedHrs\n\n  // use .some to break instead of forEach that cannot be stopped\n  feeRates.some((rate, index) => {\n    // Stop the loop when there is no hrsLeft\n    if (hrsLeft <= 0) return true\n\n    // if the rate is the last one,\n    // we'll use that rate for the rest of hr left.\n    if (index === feeRates.length - 1) {\n      // Most parking fee will think that fragment of an hour is full one hour,\n      // and we can achieve that by using Math.ceil\n      const hrsFactor = Math.ceil(hrsLeft / rate.hrs)\n      const costByRate = hrsFactor * rate.cost\n      totalCost += costByRate\n      hrsLeft = 0\n\n      // stop any further operation,\n      // because at this the last item and we should get our answer.\n      return true\n    }\n\n    // add cost of the rate to total cost\n    totalCost += rate.cost\n    // minus hrsLeft and make sure hrsLeft won't go below zero\n    hrsLeft = Math.max(hrsLeft - rate.hrs, 0)\n\n    // continue the loop\n    return false\n  })\n\n  return totalCost\n}\n","/**\n * Check if the value is an array\n *\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return !!value && typeof value === 'object' && value.constructor.name === 'Array'\n}\n","import React from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { chartData, chartOptions } from '../config/chart'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Bike parking fee by hours</h1>\n      <div>\n        <Line data={chartData} options={chartOptions} height={400} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}